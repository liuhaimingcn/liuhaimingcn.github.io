<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寻梦的尕柳</title>
  <subtitle>幽幽一缕香，飘在深深旧梦中，宛如挥手袖底风，淡淡回首，也无风雨也无晴。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.haiyue.me/"/>
  <updated>2017-03-27T06:41:17.000Z</updated>
  <id>http://www.haiyue.me/</id>
  
  <author>
    <name>寻梦的尕柳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux调优</title>
    <link href="http://www.haiyue.me/2017/03/27/linux-kernel/"/>
    <id>http://www.haiyue.me/2017/03/27/linux-kernel/</id>
    <published>2017-03-26T16:00:00.000Z</published>
    <updated>2017-03-27T06:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打开文件数设置"><a href="#打开文件数设置" class="headerlink" title="打开文件数设置"></a>打开文件数设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF</div><div class="line">* soft nofile 65535</div><div class="line">* hard nofile 65535</div><div class="line">EOF</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Linux内核调优"><a href="#Linux内核调优" class="headerlink" title="Linux内核调优"></a>Linux内核调优</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</div><div class="line"><span class="comment"># 该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除</span></div><div class="line">net.ipv4.tcp_max_tw_buckets = 20000</div><div class="line"><span class="comment"># 定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数</span></div><div class="line">net.core.somaxconn = 65535</div><div class="line"><span class="comment"># 对于还未获得对方确认的连接请求，可保存在队列中的最大数目</span></div><div class="line">net.ipv4.tcp_max_syn_backlog = 262144</div><div class="line"><span class="comment"># 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span></div><div class="line">net.core.netdev_max_backlog = 30000</div><div class="line"><span class="comment"># 能够更快地回收TIME-WAIT套接字。此选项会导致处于NAT网络的客户端超时，建议为0</span></div><div class="line">net.ipv4.tcp_tw_recycle = 0</div><div class="line"><span class="comment"># 系统所有进程一共可以打开的文件数量</span></div><div class="line">fs.file-max = 6815744</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;打开文件数设置&quot;&gt;&lt;a href=&quot;#打开文件数设置&quot; class=&quot;headerlink&quot; title=&quot;打开文件数设置&quot;&gt;&lt;/a&gt;打开文件数设置&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cat &amp;gt;&amp;gt; /etc/security/limits.conf &amp;lt;&amp;lt; EOF&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* soft nofile 65535&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* hard nofile 65535&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;EOF&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://www.haiyue.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用jenkins进行项目的自动构建部署</title>
    <link href="http://www.haiyue.me/2016/12/21/jenkins/"/>
    <id>http://www.haiyue.me/2016/12/21/jenkins/</id>
    <published>2016-12-20T16:00:00.000Z</published>
    <updated>2016-12-21T07:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jenkins-简介"><a href="#jenkins-简介" class="headerlink" title="jenkins 简介"></a>jenkins 简介</h1><ul>
<li>Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目和监控外部调用执行的工作。</li>
<li>官网地址地址： <a href="https://jenkins.io" target="_blank" rel="external">https://jenkins.io</a></li>
</ul>
<a id="more"></a>
<h1 id="下载安装启动"><a href="#下载安装启动" class="headerlink" title="下载安装启动"></a>下载安装启动</h1><h2 id="CentOS-下用yum进行安装启动"><a href="#CentOS-下用yum进行安装启动" class="headerlink" title="CentOS 下用yum进行安装启动"></a>CentOS 下用yum进行安装启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先更新源再安装最新版 jenkins</span></div><div class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</div><div class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</div><div class="line">sudo yum install jenkins</div><div class="line"><span class="comment"># 启动</span></div><div class="line">sudo service jenkins start</div><div class="line"><span class="comment"># 停止</span></div><div class="line">sudo service jenkins stop</div><div class="line"><span class="comment"># 重启</span></div><div class="line">sudo service jenkins restart</div><div class="line"><span class="comment"># 检查</span></div><div class="line">sudo chkconfig jenkins on</div></pre></td></tr></table></figure>
<h2 id="下载war包放到tomcat中启动"><a href="#下载war包放到tomcat中启动" class="headerlink" title="下载war包放到tomcat中启动"></a>下载war包放到tomcat中启动</h2><ul>
<li>服务器 yum 安装速度太慢了，最终我选择了这种方式，本地下载好war包传到服务器上的tomcat容器下，然后启动</li>
<li>下载地址：<a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="external">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a></li>
</ul>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><ul>
<li>在浏览器中输入url打开jenkins的后台控制页面<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.00.jpeg" alt="初始化界面"></li>
<li>初始化成功后会自动生成一个管理员密码放到指定位置，根据页面提示复制密码粘贴到输入框就可以登录了<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.01.jpeg" alt="初始登录界面"></li>
<li>登录成功后回让你选择插件的安装，可以选择建议的安装也可以自己进行选择，不清楚的话可以使用建议的安装<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.02.jpeg" alt="初始登录界面"></li>
<li>由于建议安装的插件比较多，安装的过程有点慢，多等待一会<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.06.jpeg" alt="初始登录界面"></li>
<li>安装的过程也可能因为网络等一些原因安装会失败，现在可以无视它，点击Continue，后面再进行手动的安装<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.30.jpeg" alt="安装完成"></li>
<li>安装完成后最好新创建一个管理员账户代替之前的临时自动生成的密码账户<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.31.jpeg" alt="创建新的管理员账户"></li>
<li>初始化完成，进入后台管理界面<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.32.jpeg" alt="初始化完成"><br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.322.jpeg" alt="后台管理界面"></li>
</ul>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><ul>
<li>之前初始化的时候，有些插件安装失败，可以在用到的时候来手动修复它，没用到的话就可以暂且不理它，不影响jenkins的使用</li>
<li>点击左侧边栏的“系统管理”，就可以看了插件安装的一些错误信息<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.40.jpeg" alt="插件错误信息"></li>
<li>在“系统管理”中往下拉,找到“管理插件”点击进去就可以查看和管理所有的插件，点击“可选插件”显示所有jenkins支持的插件，在右上角的“过滤”输入框中，输入需要安装的插件名就可以筛选查找到想要的插件<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.54.jpeg" alt="查找插件"></li>
<li>选中要安装的插件输入框，点击安装就可以在线安装需要的插件，当然由于网络的原因也可能再次安装错误，或者安装的比较慢。我们可以点击插件名进入插件的主页，里面有该插件的详细信息并能下载hpi文件进行手动安装<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.58.jpeg" alt="插件详情"></li>
<li>在“管理插件”的页面中点击高级选项，我们可以在下面找到“上传插件”，上传下载好的插件，点击“上传”，系统就会自动上传安装该插件。<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.00.jpeg" alt="上传插件"></li>
</ul>
<h1 id="gitlab的配置"><a href="#gitlab的配置" class="headerlink" title="gitlab的配置"></a>gitlab的配置</h1><ul>
<li>集成gitlab，让jenkins能够直接读取修改gitlab中的代码，方便项目的构建</li>
<li>安装gitlab-plugin</li>
<li>在“系统管理” -&gt; “系统设置“ -&gt; “Gitlab” 中配置对应的gitlab信息</li>
<li>点击“Test Connection”测试下配置是否成功<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.28.jpeg" alt="Gitlab配置"><br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.27.jpeg" alt="Add Gitlab Credentials"><br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.29.jpeg" alt="Gitlab API token"></li>
</ul>
<h1 id="Publish-Over-SSH"><a href="#Publish-Over-SSH" class="headerlink" title="Publish Over SSH"></a>Publish Over SSH</h1><ul>
<li>通过ssh连接远程服务器，并能执行脚本部署项目</li>
<li>安装publish-over-ssh</li>
<li>在“系统管理” -&gt; “系统设置“ -&gt; “Publish over SSH” 中配置对应的ssh信息</li>
<li>Key中填登录远程服务器的密码(<a href="https://www.google.com.hk/search?client=safari&amp;rls=en&amp;q=ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95&amp;ie=UTF-8&amp;oe=UTF-8&amp;gws_rd=cr,ssl" target="_blank" rel="external">ssh免密码登录</a>)</li>
<li>点击”SSH Servers”后的“增加”按钮，新增一个远程服务器</li>
<li>点开“高级…”按钮，能进一步的配置端口等信息。</li>
<li>配置为Server信息后，点击”Test Configuration”按钮测试是否能够连接成功。<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.21.jpeg" alt="ssh配置"></li>
</ul>
<h1 id="监测代码变动自动部署"><a href="#监测代码变动自动部署" class="headerlink" title="监测代码变动自动部署"></a>监测代码变动自动部署</h1><ul>
<li>点击左侧边栏的“新建”按钮，新建一个任务。</li>
<li>填写项目的名称，并选择一种构建的方式，此时我们选择第一个，构建一个自由风格的软件项目，然后点击“OK”按钮创建任务，并进行详细的配置<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.28.jpeg" alt="新建任务"></li>
<li>默认设置里填写项目名和描述，并选择之前配置好的要连接的gitlab<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.32.jpeg" alt="默认配置"></li>
<li>配置源码，填写要构建项目的源码仓库地址，并指定要构建的分支<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.30.jpeg" alt="配置源码"></li>
<li>配置触发器，选择触发构建的方式，可以通过hook，根据jenkins提供的地址，放到gitlab中的hook配置中，就会自动触发构建。此时我们选择的是定时检测项目变动，如果检测到分支有新的变动就触发构建，如果感觉一分钟时间太频繁的话，可以自己设置时间频率。<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.34.jpeg" alt="构建触发器"></li>
<li>配置构建，构建选用的是“Invoke top-level Maven target”,填写对应的maven命令，就会自动执行maven命令进行侯建</li>
<li>配置构建后操作， 该行为会在构建完成后执行，我们选用的是“Send build artifacts over SSH”的方式，把构建完成的jar包发送到远程服务器上用ssh命令执行启动，此时jenkins所有机器的默认路径是任务所在的目录，远程机器的默认路径是之前publish-over-ssh中指定的文件地址。Source files指定要传送到远程服务器上的文件，remote directory指定的是传送到远程服务器上的文件地址，Remove prefix是值要去除的文件目录，不然传送到远程服务器也会带有该目录层级结构的。exec Command里输入的是在远程服务器上要执行的指令。<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.39.jpeg" alt="构建部署配置"></li>
<li>项目构建后会有构建历史，点击进去，选择“Console Output”就可以查看构建过程中的执行记录</li>
</ul>
<h1 id="项目回滚"><a href="#项目回滚" class="headerlink" title="项目回滚"></a>项目回滚</h1><ul>
<li>上面虽然实现了项目的自动部署，但是有时部署失败的时候我们需要回滚到指定版本的构建，这样才能更灵活的进行项目的构建部署。我们可以选择“参数化的构建过程”进行传递不同的参数来选择是进行新的构建还是回滚</li>
<li>如果要在实现回滚，一定要在构建后将，构建完成的文件进行存档，方便以后回滚的时候使用<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.27.jpeg" alt="构建后存档"></li>
<li>使用参数化构建过程，让后面的脚步可以根据不同的变量执行不同的操作。添加“Choice”参数配置不同的选项，让选择发布还是回滚，添加“String Parameter”参数来传递要回滚的版本号。<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.28.jpeg" alt="参数和构建过程"></li>
<li>构建选择“Execute Shell”的方式，自己根据变量，自定义构建的脚本，此时如果是发布安装maven的构建过程进行新的构建，如果是回滚，知道历史构建后的文件，复制到当前构建结果目录。<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.29.jpeg" alt="构建脚本"></li>
<li>点击构建，根据不同的参数选择发布还是回滚，回滚的时候填写要回滚到的历史版本号<br><img src="http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.30.jpeg" alt="构建页面"></li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jenkins-简介&quot;&gt;&lt;a href=&quot;#jenkins-简介&quot; class=&quot;headerlink&quot; title=&quot;jenkins 简介&quot;&gt;&lt;/a&gt;jenkins 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目和监控外部调用执行的工作。&lt;/li&gt;
&lt;li&gt;官网地址地址： &lt;a href=&quot;https://jenkins.io&quot;&gt;https://jenkins.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://www.haiyue.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>尾调用优化</title>
    <link href="http://www.haiyue.me/2016/12/16/%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://www.haiyue.me/2016/12/16/尾调用优化/</id>
    <published>2016-12-15T16:00:00.000Z</published>
    <updated>2016-12-16T08:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是尾调用"><a href="#什么是尾调用" class="headerlink" title="什么是尾调用"></a>什么是尾调用</h1><ul>
<li>尾调用（Tail Call）是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。</li>
</ul>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 尾调用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> g(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 不属于尾调用， 调用函数g之后，还有赋值操作</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> y = g(x);</div><div class="line">  <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不属于尾调用， 调用后还有操作，即使写在一行内</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不属于尾调用，下面的两个函数等同</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  g(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  g(x);</div><div class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 尾调用, 虽然尾调用没出现在函数尾部，但是只要是最后一步操作即可</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> m(x)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><ul>
<li>函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</li>
<li>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</li>
<li>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> one = <span class="number">1</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> b + one;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> inner(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h1><ul>
<li>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</li>
<li>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常递归，复杂度 O(n)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 尾递归，复杂度 O(1)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</div><div class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来源： <a href="http://es6.ruanyifeng.com/#docs/function#尾调用优化" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/function#尾调用优化</a></p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是尾调用&quot;&gt;&lt;a href=&quot;#什么是尾调用&quot; class=&quot;headerlink&quot; title=&quot;什么是尾调用&quot;&gt;&lt;/a&gt;什么是尾调用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;尾调用（Tail Call）是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://www.haiyue.me/tags/js/"/>
    
      <category term="es6" scheme="http://www.haiyue.me/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Java 虚拟机笔记</title>
    <link href="http://www.haiyue.me/2016/12/06/jvm/"/>
    <id>http://www.haiyue.me/2016/12/06/jvm/</id>
    <published>2016-12-05T16:00:00.000Z</published>
    <updated>2016-12-06T03:05:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>
<a id="more"></a>
<h2 id="Java-的优点"><a href="#Java-的优点" class="headerlink" title="Java 的优点"></a>Java 的优点</h2><ul>
<li>是一门结构严谨、面向对象的编程语言。</li>
<li>摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的理想。</li>
<li>提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题。</li>
<li>实现了热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获得更高的性能。</li>
<li>有一套完善的应用程序接口和无数的来自商业机构和开源社区的第三方类库来帮助实现各种各样的功能。</li>
</ul>
<h2 id="Java-平台的逻辑结构"><a href="#Java-平台的逻辑结构" class="headerlink" title="Java 平台的逻辑结构"></a>Java 平台的逻辑结构</h2><p><img src="http://wiki.jikexueyuan.com/project/java-vm/images/jvmstructure.gif" alt="Java 平台的逻辑结构"></p>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul>
<li>JVM 是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。简单的说，JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序。</li>
<li>Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。<br><img src="http://wiki.jikexueyuan.com/project/java-vm/images/jvm.gif" alt="JVM 自身的物理结构"></li>
</ul>
<h2 id="class-文件的组成"><a href="#class-文件的组成" class="headerlink" title="class 文件的组成"></a>class 文件的组成</h2><ul>
<li>结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。</li>
<li>元数据。对应于 Java 源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池。</li>
<li>方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。</li>
</ul>
<h2 id="类的层次关系和加载顺序"><a href="#类的层次关系和加载顺序" class="headerlink" title="类的层次关系和加载顺序"></a>类的层次关系和加载顺序</h2><p><img src="http://wiki.jikexueyuan.com/project/java-vm/images/jvmclass.gif" alt="类的层次关系和加载顺序"></p>
<h2 id="类执行机制"><a href="#类执行机制" class="headerlink" title="类执行机制"></a>类执行机制</h2><ul>
<li>JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。</li>
</ul>
<h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><ul>
<li>Java 虚拟机在执行 Java 程序的过程中会把他所管理的内存划分为若干个不同的数据区域。</li>
<li>Java 虚拟机规范将 JVM 所管理的内存分为以下几个运行时数据区：程序计数器、Java 虚拟机栈、本地方法栈、Java 堆、方法区。<br><img src="http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png" alt="内存区域图"></li>
</ul>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><ul>
<li>一块较小的内存空间，它是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。</li>
<li>每条线程都有一个独立的的程序计数器，各线程间的计数器互不影响，因此该区域是线程私有的。</li>
<li>当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。</li>
<li>该内存区域是唯一一个在 Java 虚拟机规范中么有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</li>
</ul>
<h2 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h2><ul>
<li>该区域也是线程私有的，它的生命周期也与线程相同。</li>
<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。</li>
<li>对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</li>
<li>栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。</li>
<li>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</li>
</ul>
<h2 id="Java-虚拟机栈的异常"><a href="#Java-虚拟机栈的异常" class="headerlink" title="Java 虚拟机栈的异常"></a>Java 虚拟机栈的异常</h2><ul>
<li>在 Java 虚拟机规范中，对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>
<li>这两种情况存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。在单线程的操作中，无论是由于栈帧太大，还是虚拟机栈空间太小，当栈空间无法分配时，虚拟机抛出的都是 StackOverflowError 异常，而不会得到 OutOfMemoryError 异常。而在多线程环境下，则会抛出 OutOfMemoryError 异常。</li>
</ul>
<h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><ul>
<li>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配，即在 Java 程序被编译成 Class 文件时，就确定了所需分配的最大局部变量表的容量。当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</li>
<li>局部变量表的容量以变量槽（Slot）为最小单位。在虚拟机规范中并没有明确指明一个 Slot 应占用的内存空间大小（允许其随着处理器、操作系统或虚拟机的不同而发生变化），一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。reference 是对象的引用类型，returnAddress 是为字节指令服务的，它执行了一条字节码指令的地址。对于 64 位的数据类型（long和double），虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。</li>
<li>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量，对于 32 位数据类型的变量，索引 n 代表第 n 个 Slot，对于 64 位的，索引 n 代表第 n 和第 n+1 两个 Slot。</li>
<li>在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，占用从1开始的局部变量 Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</li>
<li>局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超过了某个变量的作用域，那么这个变量对应的 Slot 就可以交给其他变量使用。这样的设计不仅仅是为了节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</li>
</ul>
<h3 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h3><ul>
<li>操作数栈又常被称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位数据类型所占的栈容量为 2。当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）向操作栈中写入和提取内容，也就是入栈和出栈操作。</li>
<li>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称 Java 虚拟机是基于栈的，这点不同于 Android 虚拟机，Android 虚拟机是基于寄存器的。</li>
<li>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。</li>
</ul>
<h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><ul>
<li>每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</li>
</ul>
<h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h3><ul>
<li>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</li>
<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。</li>
</ul>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><ul>
<li>该区域与虚拟机栈所发挥的作用非常相似，只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为使用到的本地操作系统（Native）方法服务。</li>
</ul>
<h2 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h2><ul>
<li>Java Heap 是 Java 虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域。几乎所有的对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。</li>
<li>根据 Java 虚拟机规范的规定，Java 堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。</li>
</ul>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><ul>
<li>方法区也是各个线程共享的内存区域，它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>
<li>方法区域又被称为“永久代”，但这仅仅对于 Sun HotSpot 来讲，JRockit 和 IBM J9 虚拟机中并不存在永久代的概念。</li>
<li>Java 虚拟机规范把方法区描述为 Java 堆的一个逻辑部分，而且它和 Java Heap 一样不需要连续的内存，可以选择固定大小或可扩展，另外，虚拟机规范允许该区域可以选择不实现垃圾回收。相对而言，垃圾收集行为在这个区域比较少出现。该区域的内存回收目标主要针是对废弃常量的和无用类的回收。</li>
<li>运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li>
<li>运行时常量池相对于 Class 文件常量池的另一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入 Class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的是 String 类的 intern（）方法。</li>
</ul>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><ul>
<li>直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，它直接从操作系统中分配，因此不受 Java 堆大小的限制，但是会受到本机总内存的大小及处理器寻址空间的限制，因此它也可能导致 OutOfMemoryError 异常出现。</li>
<li>在 JDK1.4 中新引入了 NIO 机制，它是一种基于通道与缓冲区的新 I/O 方式，可以直接从操作系统中分配直接内存，即在堆外分配内存，这样能在一些场景中提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</li>
<li>根据 Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>
</ul>
<h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><ul>
<li>在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。</li>
<li>内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，</li>
<li>内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。</li>
</ul>
<h2 id="对象实例化分析"><a href="#对象实例化分析" class="headerlink" title="对象实例化分析"></a>对象实例化分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object obj = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<ul>
<li>假设该语句出现在方法体中，obj 会作为引用类型（reference）的数据保存在 Java 栈的本地变量表中，而会在 Java 堆中保存该引用的实例化对象，Java 堆中还包含能查找到此对象类型数据的地址信息（如对象类型、父类、实现的接口、方法等），这些类型数据则保存在方法区中。</li>
<li>由于 reference 类型在 Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到 Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄池和直接使用指针。这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是 reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式的最大好处是速度快，它节省了一次指针定位的时间开销。目前 Java 默认使用的 HotSpot 虚拟机采用的便是是第二种方式进行对象访问的。<br><img src="http://wiki.jikexueyuan.com/project/java-vm/images/javastack.png" alt="句柄池访问"><br><img src="http://wiki.jikexueyuan.com/project/java-vm/images/javastack1.png" alt="直接指针访问"></li>
</ul>
<h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><ul>
<li>Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行的必要数据。</li>
<li>根据 Java 虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。无符号数属于基本数据类型，以 u1、u2、u4、u8 来分别代表 1、2、4、8 个字节的无符号数。表是由多个无符号数或其他表作为数据项构成的符合数据类型，所有的表都习惯性地以“_info”结尾。</li>
</ul>
<h2 id="magic-与-version"><a href="#magic-与-version" class="headerlink" title="magic 与 version"></a>magic 与 version</h2><ul>
<li>每个 Class 文件的头 4 个字节称为魔数（magic），它的唯一作用是判断该文件是否为一个能被虚拟机接受的 Class 文件。它的值固定为 0xCAFEBABE。紧接着 magic 的 4 个字节存储的是 Class 文件的次版本号和主版本号，高版本的 JDK 能向下兼容低版本的 Class 文件，但不能运行更高版本的 Class 文件。</li>
</ul>
<h2 id="类初始化"><a href="#类初始化" class="headerlink" title="类初始化"></a>类初始化</h2><ul>
<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。</li>
<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>
<li>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：</li>
<li>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化</li>
<li>通过数组定义来引用类，不会触发类的初始化但是会触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对 Const 类的引用，并没有对其进行初始化。如果我们加入对 con 数组中各个 Const 类元素的实例化代码，便会触发 Const 类的初始化</li>
<li>接口也有初始化过程，在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。</li>
</ul>
<h2 id="类加载机制-？？？"><a href="#类加载机制-？？？" class="headerlink" title="类加载机制 ？？？"></a>类加载机制 ？？？</h2><h2 id="多态性实现机制——静态分派与动态分派-？？？"><a href="#多态性实现机制——静态分派与动态分派-？？？" class="headerlink" title="多态性实现机制——静态分派与动态分派 ？？？"></a>多态性实现机制——静态分派与动态分派 ？？？</h2><h2 id="Java-语法糖"><a href="#Java-语法糖" class="headerlink" title="Java 语法糖"></a>Java 语法糖</h2><ul>
<li>语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。</li>
<li><p>Java 中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。虚拟机并不支持这些语法，它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖。</p>
</li>
<li><p>泛型是 JDK1.5 之后引入的一项新特性，Java 语言在还没有出现泛型时，只能通过 Object 是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道 Object 真正的对象类型，在 javac 编译期，编译器无法检查这个 Object 的强制转型是否成功，这便将一些风险转接到了程序运行期中。Java 语言在 JDK1.5 之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，所以泛型技术实际上是 Java 语言的一颗语法糖，Java 语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。</p>
</li>
</ul>
<h2 id="javac-编译"><a href="#javac-编译" class="headerlink" title="javac 编译"></a>javac 编译</h2><ul>
<li>javac 编译器称为前端编译器，将<em>.java文件编译成为</em>.class文件。相对应的还有后端编译器，它在程序运行期间将字节码转变成机器码（现在的 Java 程序在运行时基本都是解释执行加编译执行），如 HotSpot 虚拟机自带的 JIT（Just In Time Compiler）编译器（分 Client 端和 Server 端）。</li>
</ul>
<h3 id="词法、语法分析"><a href="#词法、语法分析" class="headerlink" title="词法、语法分析"></a>词法、语法分析</h3><ul>
<li>词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志 int 由三个字符构成，但是它只是一个标记，不可拆分。</li>
<li>语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如 bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在抽象语法树之上。</li>
</ul>
<h3 id="填充符号表"><a href="#填充符号表" class="headerlink" title="填充符号表"></a>填充符号表</h3><ul>
<li>完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，党对符号名进行地址分配时，符号表是地址分配的依据。</li>
</ul>
<h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><ul>
<li>语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：</li>
<li>标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等。</li>
<li>数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。</li>
</ul>
<h3 id="字节码生成"><a href="#字节码生成" class="headerlink" title="字节码生成"></a>字节码生成</h3><ul>
<li>字节码生成是 javac 编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器()方法和类构造器()方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）。</li>
</ul>
<h2 id="JIT-编译"><a href="#JIT-编译" class="headerlink" title="JIT 编译"></a>JIT 编译</h2><ul>
<li>Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 JIT 编译器。</li>
<li>HotSpot 虚拟机中内置了两个JIT编译器：Client Complier 和 Server Complier，分别用在客户端和服务端，目前主流的 HotSpot 虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。</li>
</ul>
<h3 id="运行过程中会被即时编译器编译的“热点代码”有两类："><a href="#运行过程中会被即时编译器编译的“热点代码”有两类：" class="headerlink" title="运行过程中会被即时编译器编译的“热点代码”有两类："></a>运行过程中会被即时编译器编译的“热点代码”有两类：</h3><ul>
<li>被多次调用的方法。</li>
<li>被多次调用的循环体。</li>
</ul>
<h3 id="目前主要的热点判定方式"><a href="#目前主要的热点判定方式" class="headerlink" title="目前主要的热点判定方式"></a>目前主要的热点判定方式</h3><ul>
<li>基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li>
<li>基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li>
</ul>
<h3 id="在-HotSpot-虚拟机的热点判定方式"><a href="#在-HotSpot-虚拟机的热点判定方式" class="headerlink" title="在 HotSpot 虚拟机的热点判定方式"></a>在 HotSpot 虚拟机的热点判定方式</h3><ul>
<li>在 HotSpot 虚拟机中使用的是基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。</li>
<li>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</li>
<li>回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”。</li>
<li>在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了 JIT 编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。</li>
</ul>
<h2 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h2><p>Java 中的垃圾回收一般是在 Java 堆中进行，因为堆中几乎存放了 Java 中所有的对象实例。在 JDK1.2 之前，Java 中的引用定义很很纯粹：如果 reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块数据代表着一个引用。但在 JDK1.2 之后，Java 对引用的概念进行了扩充，将其分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，引用强度依次减弱。</p>
<ul>
<li>强引用：如“Object obj = new Object（）”，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。</li>
<li>软引用：它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2 之后提供了 SoftReference 类来实现软引用。</li>
<li>弱引用：它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。</li>
<li>虚引用：最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2 之后提供了 PhantomReference 类来实现虚引用。</li>
</ul>
<h2 id="垃圾对象的判定"><a href="#垃圾对象的判定" class="headerlink" title="垃圾对象的判定"></a>垃圾对象的判定</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><ul>
<li>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。</li>
<li>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</li>
</ul>
<h3 id="根搜索算法"><a href="#根搜索算法" class="headerlink" title="根搜索算法"></a>根搜索算法</h3><ul>
<li>这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连时，就证明此对象是不可用的。Java 和 C# 中都是采用根搜索算法来判定对象是否存活的。</li>
<li>在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与 GC Roots 相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。当对象没有覆盖 finalize()方法，或 finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行 finalize()方法，那么这个对象将会被放置在一个名为 F-Queue 队列中，并在稍后由一条由虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize()方法。finalize()方法是对象逃脱死亡命运的最后一次机会（因为一个对象的 finalize()方法最多只会被系统自动调用一次），稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果要在 finalize()方法中成功拯救自己，只要在 finalize()方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。</li>
</ul>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记—清除算法"><a href="#标记—清除算法" class="headerlink" title="标记—清除算法"></a>标记—清除算法</h3><ul>
<li>标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。（会造成大量的内存碎片）</li>
</ul>
<h3 id="标记—整理算法"><a href="#标记—整理算法" class="headerlink" title="标记—整理算法"></a>标记—整理算法</h3><ul>
<li>复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。（不会产生内存碎片，成本相对较高）</li>
</ul>
<h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><ul>
<li>当前商业虚拟机的垃圾收集 都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。</li>
</ul>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="内存的分配策"><a href="#内存的分配策" class="headerlink" title="内存的分配策"></a>内存的分配策</h3><ul>
<li>对象优先在 Eden 分配。</li>
<li>大对象直接进入老年代。</li>
<li>长期存活的对象将进入老年代。</li>
</ul>
<h3 id="垃圾回收策略"><a href="#垃圾回收策略" class="headerlink" title="垃圾回收策略"></a>垃圾回收策略</h3><ul>
<li>新生代 GC（Minor GC）：发生在新生代的垃圾收集动作，因为 Java 对象大多都具有朝生夕灭的特性，因此Minor GC 非常频繁，一般回收速度也比较快。</li>
<li>老年代 GC（Major GC/Full GC）：发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次 Minor GC。由于老年代中的对象生命周期比较长，因此 Major GC 并不频繁，一般都是等待老年代满了后才进行 Full GC，而且其速度一般会比 Minor GC 慢 10 倍以上。另外，如果分配了 Direct Memory，在老年代中进行 Full GC时，会顺便清理掉 Direct Memory 中的废弃对象。</li>
</ul>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ul>
<li>我们可以通过给 Java 虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，因为一次 Full GC 的时间造成比较长时间的停顿。控制 Full GC 频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定。</li>
<li>Direct Memory 在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了 NIO 机制分配使用了很多的 Direct Memory，则有可能导致 Direct Memory 的 OutOfMemoryError 异常，这时可以通过 -XX:MaxDirectMemorySize 参数调整 Direct Memory 的大小。</li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://www.haiyue.me/tags/java/"/>
    
      <category term="jvm" scheme="http://www.haiyue.me/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>RPC框架motan使用</title>
    <link href="http://www.haiyue.me/2016/11/10/motan-hello/"/>
    <id>http://www.haiyue.me/2016/11/10/motan-hello/</id>
    <published>2016-11-09T16:00:00.000Z</published>
    <updated>2016-11-10T04:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>motan是新浪微博开源的一套轻量级、方便使用的RPC框架</li>
<li>项目地址：<a href="https://github.com/weibocom/motan" target="_blank" rel="external">https://github.com/weibocom/motan</a></li>
</ul>
<a id="more"></a>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li>使用的过程分为Server端和Client端，Server提供RCP的服务接口，Client端发起调用获取结果。</li>
<li>maven的pom文件配置  </li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">motan.version</span>&gt;</span>0.2.1<span class="tag">&lt;/<span class="name">motan.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.weibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>motan-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;motan.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.weibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>motan-transport-netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;motan.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.weibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>motan-springsupport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;motan.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h3><ul>
<li><p>暴露的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user.motan;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">  <span class="function">String <span class="title">hello</span><span class="params">(String world)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>暴露接口的实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user.motan;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String world)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"hello "</span> + world;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>xml配置文件，暴露接口</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:motan</span>=<span class="string">"http://api.weibo.com/schema/motan"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></div><div class="line">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.raventech.user.motan.HelloServiceImpl"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">motan:service</span> <span class="attr">interface</span>=<span class="string">"com.raventech.user.motan.HelloService"</span> <span class="attr">ref</span>=<span class="string">"helloServiceImpl"</span> <span class="attr">export</span>=<span class="string">"8002"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动服务的方法（运行main方法就可以启动服务了）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:motan-server.xml"</span>);</div><div class="line">    System.out.println(<span class="string">"Server start ..."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h3><ul>
<li><p>要请求的接口（不论包名还是类名都要和Server端的一样）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user.motan;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">  <span class="function">String <span class="title">hello</span><span class="params">(String world)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>xml配置文件，获取接口信息</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:motan</span>=<span class="string">"http://api.weibo.com/schema/motan"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></div><div class="line">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">motan:referer</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">interface</span>=<span class="string">"com.raventech.user.motan.HelloService"</span> <span class="attr">directUrl</span>=<span class="string">"127.0.0.1:8002"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>调用服务的方法（运行main方法就可以调用服务了）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.web;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.raventech.user.motan.HelloService;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:motan-client.xml"</span>);</div><div class="line">    HelloService fooService = (HelloService) applicationContext.getBean(<span class="string">"helloService"</span>);</div><div class="line">    System.out.println(fooService.hello(<span class="string">"world"</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用响应结果<br><img src="http://7xia33.com1.z0.glb.clouddn.com/2016-11-09%20at%2017.45.png" alt=""></p>
</li>
</ul>
<h2 id="使用Consul作为注册中心"><a href="#使用Consul作为注册中心" class="headerlink" title="使用Consul作为注册中心"></a>使用Consul作为注册中心</h2><ul>
<li>在集群环境下使用motan需要依赖Consul等服务发现组件</li>
<li><a href="https://www.google.com" target="_blank" rel="external">Consul的介绍安装和使用</a></li>
<li>maven的pom文件配置(在上面的基础上增加consul)<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.weibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>motan-registry-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;motan.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Server-端-1"><a href="#Server-端-1" class="headerlink" title="Server 端"></a>Server 端</h3><ul>
<li><p>xml配置文件添加consul的注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:motan</span>=<span class="string">"http://api.weibo.com/schema/motan"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></div><div class="line">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">motan:registry</span> <span class="attr">regProtocol</span>=<span class="string">"consul"</span> <span class="attr">name</span>=<span class="string">"registry"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:8500"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.raventech.user.motan.HelloServiceImpl"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">motan:service</span> <span class="attr">interface</span>=<span class="string">"com.raventech.user.motan.HelloService"</span> <span class="attr">ref</span>=<span class="string">"helloServiceImpl"</span> <span class="attr">registry</span>=<span class="string">"registry"</span>  <span class="attr">export</span>=<span class="string">"8002"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动服务的方法要在程序启动后调用心跳开关，将服务注册到consul，不然Client无法调用 （别的和上文Hello World一样不变，运行main方法启动服务）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.weibo.api.motan.common.MotanConstants;</div><div class="line"><span class="keyword">import</span> com.weibo.api.motan.util.MotanSwitcherUtil;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:motan-server.xml"</span>);</div><div class="line">    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, <span class="keyword">true</span>);</div><div class="line">    System.out.println(<span class="string">"Server start ..."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Client-端-1"><a href="#Client-端-1" class="headerlink" title="Client 端"></a>Client 端</h3><ul>
<li><p>xml配置文件添加consul的服务发现</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:motan</span>=<span class="string">"http://api.weibo.com/schema/motan"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></div><div class="line">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">motan:registry</span> <span class="attr">regProtocol</span>=<span class="string">"consul"</span> <span class="attr">name</span>=<span class="string">"registry"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:8500"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">motan:referer</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">interface</span>=<span class="string">"com.raventech.user.motan.HelloService"</span> <span class="attr">registry</span>=<span class="string">"registry"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div><div class="line">``` </div><div class="line">* 别的和上文Hello World一样不变，运行Client类的main方法调用服务</div><div class="line"></div><div class="line">## 使用注解的方式集成到Spring Boot项目中</div><div class="line">* 项目改成Spring Boot后抛弃了繁琐的xml文件配置改为用注解的方式。motan也支持注解的方式进行配置，这样更加方便了代码的集成和风格的统一。</div><div class="line">* 继续在前面的代码中进行修改，没提到的保持不变</div><div class="line"></div><div class="line">### Server 端</div><div class="line">* 删除motan-server.xml配置文件</div><div class="line">* 用注解加载motan需要的配置</div><div class="line">``` java</div><div class="line">package com.raventech.user.config;</div><div class="line"></div><div class="line">import com.weibo.api.motan.config.springsupport.AnnotationBean;</div><div class="line">import com.weibo.api.motan.config.springsupport.BasicServiceConfigBean;</div><div class="line">import com.weibo.api.motan.config.springsupport.ProtocolConfigBean;</div><div class="line">import com.weibo.api.motan.config.springsupport.RegistryConfigBean;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line">@Configuration</div><div class="line">public class MotanConfiguration &#123;</div><div class="line"></div><div class="line">  @Bean</div><div class="line">  public AnnotationBean motanAnnotationBean() &#123;</div><div class="line">    AnnotationBean motanAnnotationBean = new AnnotationBean();</div><div class="line">    motanAnnotationBean.setPackage("com.raventech.user.motan");</div><div class="line">    return motanAnnotationBean;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Bean(name = "motan")</div><div class="line">  public ProtocolConfigBean protocolConfig1() &#123;</div><div class="line">    ProtocolConfigBean config = new ProtocolConfigBean();</div><div class="line">    config.setDefault(true);</div><div class="line">    config.setName("motan");</div><div class="line">    config.setMaxContentLength(1048576);</div><div class="line">    return config;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Bean(name = "registry")</div><div class="line">  public RegistryConfigBean registryConfig() &#123;</div><div class="line">    RegistryConfigBean config = new RegistryConfigBean();</div><div class="line">    config.setRegProtocol("consul");</div><div class="line">    config.setAddress("127.0.0.1:8500");</div><div class="line">    return config;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Bean</div><div class="line">  public BasicServiceConfigBean baseServiceConfig() &#123;</div><div class="line">    BasicServiceConfigBean config = new BasicServiceConfigBean();</div><div class="line">    config.setExport("motan:8002");</div><div class="line">    config.setRegistry("registry");</div><div class="line">    return config;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>暴露接口的实现类加上@MotanService注解，自动生成bean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user.motan;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.weibo.api.motan.config.springsupport.annotation.MotanService;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="meta">@MotanService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String world)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"hello "</span> + world;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务的方法就是启动Spring Boot项目，并在在程序启动后调用心跳开关 (运行main方法启动服务)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.user;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.weibo.api.motan.common.MotanConstants;</div><div class="line"><span class="keyword">import</span> com.weibo.api.motan.util.MotanSwitcherUtil;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    SpringApplication.run(Server.class, args);</div><div class="line">    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, <span class="keyword">true</span>);</div><div class="line">    System.out.println(<span class="string">"Server start ..."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Client-端-2"><a href="#Client-端-2" class="headerlink" title="Client 端"></a>Client 端</h3><ul>
<li>删除motan-client.xml配置文件和Client.java启动文件，已经没用了</li>
<li><p>用注解加载motan需要的配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.raventech.web.config;</div><div class="line"></div><div class="line">import com.weibo.api.motan.config.springsupport.AnnotationBean;</div><div class="line">import com.weibo.api.motan.config.springsupport.BasicRefererConfigBean;</div><div class="line">import com.weibo.api.motan.config.springsupport.ProtocolConfigBean;</div><div class="line">import com.weibo.api.motan.config.springsupport.RegistryConfigBean;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line">@Configuration</div><div class="line">public class MotanConfiguration &#123;</div><div class="line"></div><div class="line">  @Bean</div><div class="line">  public AnnotationBean motanAnnotationBean() &#123;</div><div class="line">    AnnotationBean motanAnnotationBean = new AnnotationBean();</div><div class="line">    # 添加用到motan注解的类的包名</div><div class="line">    motanAnnotationBean.setPackage("com.raventech.web.controller");</div><div class="line">    return motanAnnotationBean;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Bean(name = "motan")</div><div class="line">  public ProtocolConfigBean protocolConfig1() &#123;</div><div class="line">    ProtocolConfigBean config = new ProtocolConfigBean();</div><div class="line">    config.setDefault(true);</div><div class="line">    config.setName("motan");</div><div class="line">    config.setMaxContentLength(1048576);</div><div class="line">    return config;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Bean(name = "registry")</div><div class="line">  public RegistryConfigBean registryConfig() &#123;</div><div class="line">    RegistryConfigBean config = new RegistryConfigBean();</div><div class="line">    config.setRegProtocol("consul");</div><div class="line">    config.setAddress("127.0.0.1:8500");</div><div class="line">    return config;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Bean(name = "basicRefererConfig")</div><div class="line">  public BasicRefererConfigBean basicRefererConfigBean() &#123;</div><div class="line">    BasicRefererConfigBean config = new BasicRefererConfigBean();</div><div class="line">    config.setProtocol("motan");</div><div class="line">    config.setRegistry("registry");</div><div class="line">    config.setThrowException(true);</div><div class="line">    return config;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用方法（在Controller中使用）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.web.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.raventech.user.motan.HelloService;</div><div class="line"><span class="keyword">import</span> com.raventech.web.common.BaseController;</div><div class="line"><span class="keyword">import</span> com.weibo.api.motan.config.springsupport.annotation.MotanReferer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> liuhaiming on 10/11/2016.</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/motan"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@MotanReferer</span>(basicReferer = <span class="string">"basicRefererConfig"</span>)</div><div class="line">  <span class="keyword">private</span> HelloService helloService;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">return</span> helloService.hello(<span class="string">"world"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>启动Spring Boot项目，在浏览器中访问<a href="http://127.0.0.1:8080/motan/hello就可以获取验证结果" target="_blank" rel="external">http://127.0.0.1:8080/motan/hello就可以获取验证结果</a></p>
</li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;motan是新浪微博开源的一套轻量级、方便使用的RPC框架&lt;/li&gt;
&lt;li&gt;项目地址：&lt;a href=&quot;https://github.com/weibocom/motan&quot;&gt;https://github.com/weibocom/motan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://www.haiyue.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用ELK管理日志</title>
    <link href="http://www.haiyue.me/2016/11/04/elk/"/>
    <id>http://www.haiyue.me/2016/11/04/elk/</id>
    <published>2016-11-03T16:00:00.000Z</published>
    <updated>2016-11-04T07:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网： <a href="https://www.elastic.co/products/logstash" target="_blank" rel="external">https://www.elastic.co/products/logstash</a></li>
</ul>
<a id="more"></a>
<h2 id="检查java环境"><a href="#检查java环境" class="headerlink" title="检查java环境"></a>检查java环境</h2><ul>
<li>需要java8以上的环境支撑</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">java version <span class="string">"1.8.0_111"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)</div></pre></td></tr></table></figure>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ wget https://artifacts.elastic.co/downloads/logstash/logstash-5.0.0.tar.gz</div><div class="line">$ tar zxvf logstash-5.0.0.tar.gz</div><div class="line">$ <span class="built_in">cd</span> logstash-5.0.0/</div><div class="line">$ ./bin/logstash <span class="_">-e</span> <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></div><div class="line">Sending Logstash logs to /home/nlp/logstash-5.0.0/logs <span class="built_in">which</span> is now configured via <span class="built_in">log</span>4j2.properties.</div><div class="line">The stdin plugin is now waiting <span class="keyword">for</span> input:</div><div class="line">[2016-11-03T16:05:11,070][INFO ][logstash.pipeline        ] Starting pipeline &#123;<span class="string">"id"</span>=&gt;<span class="string">"main"</span>, <span class="string">"pipeline.workers"</span>=&gt;4, <span class="string">"pipeline.batch.size"</span>=&gt;125, <span class="string">"pipeline.batch.delay"</span>=&gt;5, <span class="string">"pipeline.max_inflight"</span>=&gt;500&#125;</div><div class="line">[2016-11-03T16:05:11,091][INFO ][logstash.pipeline        ] Pipeline main started</div><div class="line">[2016-11-03T16:05:11,133][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</div><div class="line">hello world</div><div class="line">2016-11-03T08:05:47.176Z iZ25ueoepxdZ hello world</div></pre></td></tr></table></figure>
<h2 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h2><ul>
<li>将日志文件输出到elasticsearch</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ vim test.conf</div><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; [<span class="string">"/alidata/logs/web/web-info.log"</span>]</div><div class="line">        start_position =&gt; <span class="string">"beginning"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [<span class="string">"127.0.0.1:9200"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="external">https://www.elastic.co/products/elasticsearch</a></li>
</ul>
<h2 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.0.tar.gz</div><div class="line">$ tar zxvf elasticsearch-5.0.0.tar.gz</div><div class="line">$ <span class="built_in">cd</span> elasticsearch-5.0.0/</div><div class="line">$ ./bin/elasticsearch</div><div class="line">$ curl http://localhost:9200</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"R9IzZP9"</span>,</div><div class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</div><div class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"TGY12_FFSQCfp42g5NZ1VQ"</span>,</div><div class="line">  <span class="string">"version"</span> : &#123;</div><div class="line">    <span class="string">"number"</span> : <span class="string">"5.0.0"</span>,</div><div class="line">    <span class="string">"build_hash"</span> : <span class="string">"253032b"</span>,</div><div class="line">    <span class="string">"build_date"</span> : <span class="string">"2016-10-26T04:37:51.531Z"</span>,</div><div class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.2.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./bin/elasticsearch <span class="_">-d</span> -p es.pid  // 进程id写到es.pid文件中</div></pre></td></tr></table></figure>
<h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">https://www.elastic.co/products/kibana</a></li>
</ul>
<h2 id="下载安装-2"><a href="#下载安装-2" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ wget https://artifacts.elastic.co/downloads/kibana/kibana-5.0.0-linux-x86_64.tar.gz</div><div class="line">$ tar xvf kibana-5.0.0-linux-x86_64.tar</div><div class="line">$ <span class="built_in">cd</span> kibana-5.0.0-linux-x86_64/</div><div class="line">$ vim config/kibana.yml</div><div class="line">server.host: <span class="string">"*.205.*.30"</span> // 外网ip地址，不然只能本机才能访问</div><div class="line">elasticsearch.url: <span class="string">"http://localhost:9200"</span>  // 集成elasticsearch</div></pre></td></tr></table></figure>
<ul>
<li>用浏览器打开查看： <a href="http://*.205.*.30:5601" target="_blank" rel="external">http://*.205.*.30:5601</a></li>
</ul>
<h2 id="后台运行-1"><a href="#后台运行-1" class="headerlink" title="后台运行"></a>后台运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nohup ./bin/kibana &gt; nohup.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Logstash&quot;&gt;&lt;a href=&quot;#Logstash&quot; class=&quot;headerlink&quot; title=&quot;Logstash&quot;&gt;&lt;/a&gt;Logstash&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网： &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;https://www.elastic.co/products/logstash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://www.haiyue.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 中使用 Jedis 来操作 Redis</title>
    <link href="http://www.haiyue.me/2016/10/27/spring-boot-jedis/"/>
    <id>http://www.haiyue.me/2016/10/27/spring-boot-jedis/</id>
    <published>2016-10-26T16:00:00.000Z</published>
    <updated>2016-10-27T10:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>把之前老的项目切换到用 Spring Boot 时，由于抛弃了 xml 配置文件的使用，需要把之前 Jedis 配置现在用注解的形式重新实现一遍。  </p>
<h3 id="老的代码"><a href="#老的代码" class="headerlink" title="老的代码"></a>老的代码</h3><ul>
<li>config.properties</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># redis数据库连接配置(covert)</div><div class="line">redis.url=redis://:name@host:6379/2</div><div class="line"># 最大实例数</div><div class="line">redis.maxTotal=100</div><div class="line"># 最大空闲实例数</div><div class="line">redis.maxIdle=10</div><div class="line"># (创建实例时)最大等待时间</div><div class="line">redis.maxWaitMillis=10000</div><div class="line"># (创建实例时)是否验证</div><div class="line">redis.testOnBorrow=true</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>spring.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--加载外部数据库配置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config.properties"</span> <span class="attr">file-encoding</span>=<span class="string">"utf-8"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxTotal&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWaitMillis&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"convertShardInfo"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisShardInfo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.url&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"convertJedisPool"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.ShardedJedisPool"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"convertShardInfo"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="新的代码"><a href="#新的代码" class="headerlink" title="新的代码"></a>新的代码</h3><ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># redis数据库连接配置(covert)</span></div><div class="line"><span class="attr">redisConfig:</span></div><div class="line"><span class="attr">  url:</span> <span class="string">"redis://:name@host:6379/2"</span></div><div class="line">  <span class="comment"># 最大实例数</span></div><div class="line"><span class="attr">  maxTotal:</span> <span class="number">100</span></div><div class="line">  <span class="comment"># 最大空闲实例数</span></div><div class="line"><span class="attr">  maxIdle:</span> <span class="number">10</span></div><div class="line">  <span class="comment"># (创建实例时)最大等待时间</span></div><div class="line"><span class="attr">  maxWaitMillis:</span> <span class="number">10000</span></div><div class="line">  <span class="comment"># (创建实例时)是否验证</span></div><div class="line"><span class="attr">  testOnBorrow:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<ul>
<li>RedisConfig.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.raventech.web.models.yml;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"redisConfig"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1097752157567754456L</span>;</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> Integer maxTotal;</div><div class="line">    <span class="keyword">private</span> Integer maxIdle;</div><div class="line">    <span class="keyword">private</span> Long maxWaitMillis;</div><div class="line">    <span class="keyword">private</span> Boolean testOnBorrow;</div><div class="line">    ......</div></pre></td></tr></table></figure>
<ul>
<li>JedisConfiguration.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"com.raventech.web.models.yml"</span>&#125;) <span class="comment">// 解决 Configuration 注解中使用 Autowired 注解 IDE 报错</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisConfiguration</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	RedisConfig redisConfig;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ShardedJedisPool <span class="title">convertJedisPool</span><span class="params">()</span> </span>&#123;</div><div class="line">		JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">		jedisPoolConfig.setMaxTotal(redisConfig.getMaxTotal());</div><div class="line">		jedisPoolConfig.setMaxIdle(redisConfig.getMaxIdle());</div><div class="line">		jedisPoolConfig.setMaxWaitMillis(redisConfig.getMaxWaitMillis());</div><div class="line">		jedisPoolConfig.setTestOnBorrow(redisConfig.getTestOnBorrow());</div><div class="line">		List&lt;JedisShardInfo&gt; jedisShardInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		jedisShardInfoList.add(<span class="keyword">new</span> JedisShardInfo(redisConfig.getUrl()));</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ShardedJedisPool(jedisPoolConfig, jedisShardInfoList);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">private ShardedJedisPool convertJedisPool;</div><div class="line"></div><div class="line">public String convertRedisGet(String key) &#123;</div><div class="line">	ShardedJedis resource = convertJedisPool.getResource();</div><div class="line">	String result = resource.get(key);</div><div class="line">	resource.close();</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把之前老的项目切换到用 Spring Boot 时，由于抛弃了 xml 配置文件的使用，需要把之前 Jedis 配置现在用注解的形式重新实现一遍。  &lt;/p&gt;
&lt;h3 id=&quot;老的代码&quot;&gt;&lt;a href=&quot;#老的代码&quot; class=&quot;headerlink&quot; title=&quot;老的代码&quot;&gt;&lt;/a&gt;老的代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;config.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# redis数据库连接配置(covert)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis.url=redis://:name@host:6379/2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 最大实例数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis.maxTotal=100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 最大空闲实例数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis.maxIdle=10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# (创建实例时)最大等待时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis.maxWaitMillis=10000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# (创建实例时)是否验证&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis.testOnBorrow=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring Boot" scheme="http://www.haiyue.me/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Configuration 注解中使用 Autowired 注解 IDE 报错</title>
    <link href="http://www.haiyue.me/2016/10/26/spring-boot-no-beans/"/>
    <id>http://www.haiyue.me/2016/10/26/spring-boot-no-beans/</id>
    <published>2016-10-25T16:00:00.000Z</published>
    <updated>2016-10-26T09:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Spring Boot 项目中会用 @Configuration 注解来初始化配置, 这时可以通过 @autowired 自动注入封装好的model对象, 方便使用yml中的配置的数据。<br>这样做代码运行没问题，通过该对象也可以成功的获取yml配置文件中的数据，但是 IDE 却给出 “Could not autowird. No beans of’RedisConfig’ type found.” 的错误提示。    </p>
<p><img src="http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.18.png" alt="">  </p>
<a id="more"></a>
<p>我们手动的在 @Configuration 注解下面添加 @ComponentScan 注解并指定所需model类的包地址就可以解决整个问题了。<br>原因估计是因为在项目的启动的最初阶段，IDE 还没有扫描到model类，无法发现对应的 bean，于是就需要我们手动的给其指定需要扫描的包了。      </p>
<p><img src="http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.19.png" alt=""></p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Spring Boot 项目中会用 @Configuration 注解来初始化配置, 这时可以通过 @autowired 自动注入封装好的model对象, 方便使用yml中的配置的数据。&lt;br&gt;这样做代码运行没问题，通过该对象也可以成功的获取yml配置文件中的数据，但是 IDE 却给出 “Could not autowird. No beans of’RedisConfig’ type found.” 的错误提示。    &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.18.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring Boot" scheme="http://www.haiyue.me/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>yml 文件中使用环境变量</title>
    <link href="http://www.haiyue.me/2016/10/25/yml-evn/"/>
    <id>http://www.haiyue.me/2016/10/25/yml-evn/</id>
    <published>2016-10-24T16:00:00.000Z</published>
    <updated>2016-10-25T06:52:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 中可以用 spring.profiles.active 参数来指定系统环境，让系统加载不同的配置文件。<br>可以在程序启动的时候加上参数来指定需要的配置  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -Dspring.profiles.active=&quot;dev&quot; -jar user.jar</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当然我们也可以事先设置好系统的环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expoer SERVER_EVN=test</div></pre></td></tr></table></figure>
<p>然后在 yml 文件中用 active: ${SERVER_EVN} 来动态的获取系统已设置好的数据。这样这台 test 服务器中的再启动 Spring Boot 项目的时候就可以不用每次都去设置参数了。  </p>
<p>同时 yml 也支持 ${SERVER_EVN:dev} 这样的方式来设置默认值，此时如果环境变量中没有 SERVER_EVN ， active就会默认设置为”dev”。  </p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 中可以用 spring.profiles.active 参数来指定系统环境，让系统加载不同的配置文件。&lt;br&gt;可以在程序启动的时候加上参数来指定需要的配置  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;java -Dspring.profiles.active=&amp;quot;dev&amp;quot; -jar user.jar&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring Boot" scheme="http://www.haiyue.me/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目中只能有一个main方法</title>
    <link href="http://www.haiyue.me/2016/10/24/spring-boot-single-main/"/>
    <id>http://www.haiyue.me/2016/10/24/spring-boot-single-main/</id>
    <published>2016-10-23T16:00:00.000Z</published>
    <updated>2016-10-24T09:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>对Spring Boot 项目用maven进行打包的时候报错以下错误  </p>
<p>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) on project nlp-user: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.raventech.user.Application, com.raventech.user.util.Utils] -&gt; [Help 1]  </p>
<a id="more"></a>
<p>原来是因为 Spring Boot 项目中只能有一个main方法，不然 spring-boot-maven-plugin 在打包的过程中会扫描到了多个 main 方法，然后就懵逼不知道用哪个作为启动方法了。  </p>
<p>以前总喜欢在 Utils 中写个main方法来调试静态方法，看来以后用完就得随手把它给删除了。</p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Spring Boot 项目用maven进行打包的时候报错以下错误  &lt;/p&gt;
&lt;p&gt;[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) on project nlp-user: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.raventech.user.Application, com.raventech.user.util.Utils] -&amp;gt; [Help 1]  &lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring Boot" scheme="http://www.haiyue.me/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Docker Hello World</title>
    <link href="http://www.haiyue.me/2016/10/09/docker-hello-world/"/>
    <id>http://www.haiyue.me/2016/10/09/docker-hello-world/</id>
    <published>2016-10-08T16:00:00.000Z</published>
    <updated>2016-10-09T07:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看linux版本"><a href="#查看linux版本" class="headerlink" title="查看linux版本"></a>查看linux版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lsb_release <span class="_">-a</span></div><div class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</div><div class="line">Distributor ID: CentOS</div><div class="line">Description:    CentOS Linux release 7.2.1511 (Core)</div><div class="line">Release:    7.2.1511</div><div class="line">Codename:   Core</div></pre></td></tr></table></figure>
<a id="more"></a>   
<h2 id="Docker-环境准备"><a href="#Docker-环境准备" class="headerlink" title="Docker 环境准备"></a>Docker 环境准备</h2><ul>
<li>CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ su root</div><div class="line"><span class="comment"># yum install docker</span></div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service docker start</span></div><div class="line">Redirecting to /bin/systemctl start  docker.service</div></pre></td></tr></table></figure>
<h3 id="让它随系统启动自动加载"><a href="#让它随系统启动自动加载" class="headerlink" title="让它随系统启动自动加载"></a>让它随系统启动自动加载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service docker start</span></div><div class="line">Redirecting to /bin/systemctl start  docker.service</div><div class="line"><span class="comment"># chkconfig docker on</span></div><div class="line">注意：正在将请求转发到“systemctl <span class="built_in">enable</span> docker.service”。</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</div></pre></td></tr></table></figure>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker pull ubuntu:12.04</span></div><div class="line">Trying to pull repository docker.io/library/ubuntu ...</div><div class="line">12.04: Pulling from docker.io/library/ubuntu</div><div class="line">36cef014d5d4: Pull complete</div><div class="line">0d99ad4de1d2: Pull complete</div><div class="line">3e32dbf1ab94: Pull complete</div><div class="line">44710c456ffc: Pull complete</div><div class="line">56e70ac3b314: Pull complete</div><div class="line">Digest: sha256:0c25aa67baaff2b895882ce1e7d25efeeb15d0f38df6c099e23f481641<span class="built_in">cd</span>6cab</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> docker.io/ubuntu:12.04</div></pre></td></tr></table></figure>
<h3 id="列出本地已有的镜像"><a href="#列出本地已有的镜像" class="headerlink" title="列出本地已有的镜像"></a>列出本地已有的镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</div></pre></td></tr></table></figure>
<ul>
<li>REPOSITORY: 来自于哪个仓库</li>
<li>TAG: 镜像的标记（如果不指定具体的标记，则默认使用 latest 标记信息。）</li>
<li>IMAGE ID: 它的 ID 号（唯一）</li>
<li>CREATED: 创建时间</li>
<li>SIZE: 镜像大小</li>
</ul>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><ul>
<li>修改已有镜像</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -t -i docker.io/ubuntu:12.04 /bin/bash</span></div><div class="line">root@d7ac9b2f8<span class="built_in">cd</span>7:/<span class="comment"># apt-get update</span></div><div class="line">root@d7ac9b2f8<span class="built_in">cd</span>7:/<span class="comment"># apt-get install nodejs</span></div><div class="line">root@d7ac9b2f8<span class="built_in">cd</span>7:/<span class="comment"># node -v</span></div><div class="line">v0.6.12</div><div class="line">root@d7ac9b2f8<span class="built_in">cd</span>7:/<span class="comment"># exit</span></div><div class="line"><span class="built_in">exit</span></div><div class="line"><span class="comment"># docker commit -m "add node evn" -a "haiyue" d7ac9b2f8cd7 haiyue/nodejs:v1</span></div><div class="line">sha256:23c1c51f86414ae2ab3bf31f192537e6635c248044b61802c9e553ef4e46fbf9</div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">haiyue/nodejs       v1                  23c1c51f8641        10 seconds ago      162.4 MB</div><div class="line">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</div></pre></td></tr></table></figure>
<p>-m 来指定提交的说明信息；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。</p>
<ul>
<li>利用 Dockerfile 来创建镜像<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir haiyue</span></div><div class="line"><span class="comment"># cd haiyue/</span></div><div class="line"><span class="comment"># This is a comment</span></div><div class="line"><span class="comment"># vim Dockerfile</span></div><div class="line">FROM docker.io/ubuntu:12.04</div><div class="line">MAINTAINER haiyue</div><div class="line">RUN apt-get update</div><div class="line">RUN apt-get install nodejs</div><div class="line"><span class="comment"># docker build -t="haiyue/nodejs:v2" .</span></div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">haiyue/nodejs       v2                  5190c35<span class="built_in">fc</span>391        4 seconds ago       103.6 MB</div><div class="line">haiyue/nodejs       v1                  23c1c51f8641        2 hours ago         162.4 MB</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Dockerfile 基本的语法是</div><div class="line">#: 注释</div><div class="line">FROM: 告诉 Docker 使用哪个镜像作为基础</div><div class="line">MAINTAINER: 维护者的信息</div><div class="line">RUN: 指令会在创建中运行</div><div class="line"></div><div class="line">build 指令后 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</div><div class="line"></div><div class="line">*注意一个镜像不能超过 127 层</div></pre></td></tr></table></figure>
<ul>
<li>上传镜像(推送自己的镜像到仓库, Docker Hub)<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker push haiyue/nodejs</span></div><div class="line">The push refers to a repository [haiyue/nodejs] (len: 1)</div><div class="line">Sending image list</div><div class="line">Pushing repository haiyue/nodejs (2 tags)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="存出和载入镜像"><a href="#存出和载入镜像" class="headerlink" title="存出和载入镜像"></a>存出和载入镜像</h3><ul>
<li>存出镜像</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker save -o nodejs_v1.tar haiyue/nodejs:v1</span></div></pre></td></tr></table></figure>
<ul>
<li>载入镜像</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker load &lt; nodejs_v1.tar</span></div></pre></td></tr></table></figure>
<h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker rmi haiyue/nodejs:v2</span></div><div class="line">Untagged: haiyue/nodejs:v2</div><div class="line">Deleted: sha256:5190c35<span class="built_in">fc</span>391b6e9b3ed228a60a8342887fb555efcbb8a7bc351badfbb306550</div><div class="line">Deleted: sha256:01e2<span class="built_in">cd</span>409ed3b15a1c34a2<span class="built_in">cd</span>656772f51e472ec988b2011ec7d60de3a23e3111</div><div class="line">Deleted: sha256:daf78048142d52646c96e8ac025ea5d034270e15cab677838638767b00cb908e</div><div class="line"><span class="comment"># docker rmi 23c1c51f8641</span></div><div class="line">Failed to remove image (23c1c51f8641): Error response from daemon: conflict: unable to delete 23c1c51f8641 (must be forced) - image is being used by stopped container 1586df1c5dc1</div><div class="line"><span class="comment"># docker rmi -f 23c1c51f8641</span></div><div class="line">Untagged: haiyue/nodejs:v1</div></pre></td></tr></table></figure>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><ul>
<li>新建并启动<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run haiyue/nodejs:v1 /bin/echo 'Hello world'</span></div><div class="line">Hello world</div><div class="line"><span class="comment"># docker run -t -i haiyue/nodejs:v1 /bin/bash</span></div><div class="line">root@66230fd659ff:/<span class="comment"># node -v</span></div><div class="line">v0.6.12</div><div class="line">root@66230fd659ff:/<span class="comment"># ls</span></div><div class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-t 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上 </div><div class="line">-i 则让容器的标准输入保持打开。</div><div class="line"></div><div class="line">docker run 来创建容器时，Docker 在后台运行的标准操作包括：</div><div class="line">检查本地是否存在指定的镜像，不存在就从公有仓库下载</div><div class="line">利用镜像创建并启动一个容器</div><div class="line">分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</div><div class="line">从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</div><div class="line">从地址池配置一个 ip 地址给容器</div><div class="line">执行用户指定的应用程序</div><div class="line">执行完毕后容器被终止</div></pre></td></tr></table></figure>
<ul>
<li>启动已终止容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">利用 docker start 命令，直接将一个已经终止的容器启动运行。</div><div class="line">docker restart 命令会将一个运行态的容器终止，然后再重新启动它。</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="守护态运行"><a href="#守护态运行" class="headerlink" title="守护态运行"></a>守护态运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -d haiyue/nodejs:v1 /bin/sh -c "while true; do echo hello world; sleep 1; done"</span></div><div class="line">90a4f5809293e21f8eacf1945668b9076e68ed500ac3d3018<span class="built_in">fc</span>902d947f57248</div><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">90a4f5809293        haiyue/nodejs:v1    <span class="string">"/bin/sh -c 'while tr"</span>   9 seconds ago       Up 8 seconds                            determined_sammet</div><div class="line"><span class="comment"># docker logs 90a4f5809293</span></div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div></pre></td></tr></table></figure>
<h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">90a4f5809293        haiyue/nodejs:v1    <span class="string">"/bin/sh -c 'while tr"</span>   2 minutes ago       Up 2 minutes                            determined_sammet</div><div class="line"><span class="comment"># docker stop 90a4f5809293</span></div><div class="line">90a4f5809293</div><div class="line"><span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</div><div class="line">90a4f5809293        haiyue/nodejs:v1    <span class="string">"/bin/sh -c 'while tr"</span>   3 minutes ago       Exited (137) 37 seconds ago                       determined_sammet</div></pre></td></tr></table></figure>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker attach 90a4f5809293</span></div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div></pre></td></tr></table></figure>
<h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><ul>
<li>导出容器</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker export 90a4f5809293 &gt; determined_sammet.tar</span></div><div class="line"><span class="comment"># ls</span></div><div class="line">determined_sammet.tar</div></pre></td></tr></table></figure>
<ul>
<li>导入容器快照(容器快照文件中再导入为镜像)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">haiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB</div><div class="line">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</div><div class="line"><span class="comment"># cat determined_sammet.tar | docker import - haiyue/nodejs:v2</span></div><div class="line">sha256:7b78999d774ccb41d474fb2c851323191967593053a26982c11157c7621e9202</div><div class="line"><span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">haiyue/nodejs       v2                  7b78999d774c        3 seconds ago       142.1 MB</div><div class="line">haiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB</div><div class="line">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</div></pre></td></tr></table></figure>
<ul>
<li>删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">可以使用 docker rm 来删除一个处于终止状态的容器。</div><div class="line">如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看linux版本&quot;&gt;&lt;a href=&quot;#查看linux版本&quot; class=&quot;headerlink&quot; title=&quot;查看linux版本&quot;&gt;&lt;/a&gt;查看linux版本&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ lsb_release &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LSB Version:    :core-4.1-amd64:core-4.1-noarch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Distributor ID: CentOS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Description:    CentOS Linux release 7.2.1511 (Core)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Release:    7.2.1511&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Codename:   Core&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Docker" scheme="http://www.haiyue.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 安装</title>
    <link href="http://www.haiyue.me/2016/09/06/nginx-install/"/>
    <id>http://www.haiyue.me/2016/09/06/nginx-install/</id>
    <published>2016-09-05T16:00:00.000Z</published>
    <updated>2016-09-06T10:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装编译工具及库文件"><a href="#安装编译工具及库文件" class="headerlink" title="安装编译工具及库文件"></a>安装编译工具及库文件</h2><ul>
<li>切换到root用户下面</li>
<li>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</li>
</ul>
<a id="more"></a>   
<h2 id="安装-PCRE"><a href="#安装-PCRE" class="headerlink" title="安装 PCRE"></a>安装 PCRE</h2><ul>
<li>PCRE 作用是让 Ngnix 支持 Rewrite 功能。</li>
<li>wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="external">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></li>
<li>tar zxvf pcre-8.35.tar.gz</li>
<li>cd pcre-8.35</li>
<li>./configure</li>
<li>make &amp;&amp; make install</li>
<li>pcre-config –version</li>
</ul>
<h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><ul>
<li>wget <a href="http://nginx.org/download/nginx-1.6.2.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.6.2.tar.gz</a></li>
<li>tar zxvf nginx-1.6.2.tar.gz</li>
<li>cd nginx-1.6.2</li>
<li>./configure –with-http_stub_status_module –with-http_ssl_module –with-pcre</li>
<li>make &amp;&amp; make install</li>
<li>/usr/local/nginx/sbin/nginx -v</li>
</ul>
<h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><ul>
<li>配置nginx.conf</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">将/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf替换为以下内容</div><div class="line"></div><div class="line">user  liuhaiming liuhaiming;</div><div class="line">worker_processes  4; <span class="comment"># 设置值和CPU核心数一致</span></div><div class="line">error_log /usr/<span class="built_in">local</span>/nginx/logs/nginx_error.log notice; <span class="comment">#日志位置和日志级别</span></div><div class="line">pid        /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid;</div><div class="line"><span class="comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></div><div class="line">worker_rlimit_nofile 65535;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">        use epoll;</div><div class="line">        worker_connections 65535;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">        include       mime.types;</div><div class="line">        default_type  application/octet-stream;</div><div class="line"></div><div class="line">        log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></div><div class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</div><div class="line"></div><div class="line">        server_names_hash_bucket_size 128;</div><div class="line">        client_header_buffer_size 32k;</div><div class="line">        large_client_header_buffers 4 32k;</div><div class="line">        client_max_body_size 8m;</div><div class="line"></div><div class="line">        sendfile        on;</div><div class="line">        tcp_nopush on;</div><div class="line">        keepalive_timeout 60;</div><div class="line">        tcp_nodelay on;</div><div class="line">        fastcgi_connect_timeout 300;</div><div class="line">        fastcgi_send_timeout 300;</div><div class="line">        fastcgi_read_timeout 300;</div><div class="line">        fastcgi_buffer_size 64k;</div><div class="line">        fastcgi_buffers 4 64k;</div><div class="line">        fastcgi_busy_buffers_size 128k;</div><div class="line">        fastcgi_temp_file_write_size 128k;</div><div class="line">        gzip on;</div><div class="line">        gzip_min_length 1k;</div><div class="line">        gzip_buffers 4 16k;</div><div class="line">        gzip_http_version 1.0;</div><div class="line">        gzip_comp_level 2;</div><div class="line">        gzip_types text/plain application/x-javascript text/css application/xml;</div><div class="line">        gzip_vary on;</div><div class="line"></div><div class="line">        <span class="comment">#下面是server虚拟主机的配置</span></div><div class="line">        server &#123;</div><div class="line">                listen       80; <span class="comment"># 监听端口</span></div><div class="line">                server_name  localhost; <span class="comment"># 域名</span></div><div class="line"></div><div class="line">                charset utf-8;</div><div class="line">                access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">                error_page   500 502 503 504  /50x.html;</div><div class="line">                location = /50x.html &#123;</div><div class="line">                        root   html;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>检查配置文件ngnix.conf的正确性: /usr/local/nginx/sbin/nginx -t</li>
<li>启动 Nginx: /usr/local/nginx/sbin/nginx</li>
<li>访问站点: <a href="http://182.92.109.136/" target="_blank" rel="external">http://182.92.109.136/</a></li>
</ul>
<h2 id="Nginx-其他命令"><a href="#Nginx-其他命令" class="headerlink" title="Nginx 其他命令"></a>Nginx 其他命令</h2><ul>
<li>/usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件</li>
<li>/usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx</li>
<li>/usr/local/nginx/sbin/nginx -s stop              # 停止 Nginx</li>
</ul>
<h2 id="常用指令说明"><a href="#常用指令说明" class="headerlink" title="常用指令说明"></a>常用指令说明</h2><h3 id="main全局配置"><a href="#main全局配置" class="headerlink" title="main全局配置"></a>main全局配置</h3><ul>
<li>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。  </li>
<li>woker_processes 4 在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数(grep ^processor /proc/cpuinfo | wc -l)，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</li>
<li>worker_cpu_affinity 也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。</li>
<li>worker_connections 2048 写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</li>
<li>worker_rlimit_nofile 10240 写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。</li>
<li>use epoll 写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</li>
</ul>
<h3 id="http服务器"><a href="#http服务器" class="headerlink" title="http服务器"></a>http服务器</h3><ul>
<li>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</li>
<li>sendfile on 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</li>
<li>keepalive_timeout 65 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li>
<li>send_timeout 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>
<li>client_max_body_size 10m 允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li>
<li>client_body_buffer_size 128k 缓冲区代理缓冲用户端请求的最大字节数</li>
</ul>
<h3 id="模块http-proxy"><a href="#模块http-proxy" class="headerlink" title="模块http_proxy"></a>模块http_proxy</h3><ul>
<li>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能</li>
<li>proxy_connect_timeout 60 nginx跟后端服务器连接超时时间(代理连接超时)</li>
<li>proxy_read_timeout 60 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li>
<li>proxy_buffer_size 4k 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</li>
<li>proxy_buffers 4 32k proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置</li>
<li>proxy_busy_buffers_size 64k 高负荷下缓冲大小（proxy_buffers*2）</li>
<li>proxy_max_temp_file_size 当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</li>
<li>proxy_temp_file_write_size 64k 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</li>
<li>proxy_pass，proxy_redirect见 location 部分。</li>
</ul>
<h3 id="模块http-gzip"><a href="#模块http-gzip" class="headerlink" title="模块http_gzip"></a>模块http_gzip</h3><ul>
<li>gzip on : 开启gzip压缩输出，减少网络传输。</li>
<li>gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>
<li>gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>
<li>gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>
<li>gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>
<li>gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>
<li>gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>
<li>gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>
</ul>
<h3 id="server虚拟主机"><a href="#server虚拟主机" class="headerlink" title="server虚拟主机"></a>server虚拟主机</h3><ul>
<li>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</li>
<li>listen 监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</li>
<li>server_name 服务器名，如localhost、www.example.com，可以通过正则匹配。</li>
</ul>
<h3 id="模块http-stream"><a href="#模块http-stream" class="headerlink" title="模块http_stream"></a>模块http_stream</h3><ul>
<li>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</li>
</ul>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><ul>
<li>http服务中，某些特定的URL对应的一系列配置项。</li>
<li>root /var/www/html 定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。</li>
<li>index index.jsp index.html index.htm 定义路径下默认访问的文件名，一般跟着root放</li>
<li>proxy_pass http:/backend 请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass <a href="http://ip:port。" target="_blank" rel="external">http://ip:port。</a></li>
</ul>
<p>原文链接</p>
<ul>
<li><a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="external">http://www.runoob.com/linux/nginx-install-setup.html</a></li>
<li><a href="https://segmentfault.com/a/1190000002797601#articleHeader7" target="_blank" rel="external">https://segmentfault.com/a/1190000002797601#articleHeader7</a></li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装编译工具及库文件&quot;&gt;&lt;a href=&quot;#安装编译工具及库文件&quot; class=&quot;headerlink&quot; title=&quot;安装编译工具及库文件&quot;&gt;&lt;/a&gt;安装编译工具及库文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;切换到root用户下面&lt;/li&gt;
&lt;li&gt;yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Nginx" scheme="http://www.haiyue.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中用escape解决sql注入</title>
    <link href="http://www.haiyue.me/2016/07/05/escape/"/>
    <id>http://www.haiyue.me/2016/07/05/escape/</id>
    <published>2016-07-04T16:00:00.000Z</published>
    <updated>2016-07-05T07:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。"><a href="#直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。" class="headerlink" title="直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。"></a>直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。</h3><pre><code class="js"><span class="meta">'use strict'</span>;

<span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);

<span class="keyword">let</span> param = <span class="string">'ns'</span>;
<span class="keyword">let</span> pool = mysql.createPool({
  <span class="attr">user</span>: <span class="string">'root'</span>,
  <span class="attr">password</span>: <span class="string">'root'</span>,
  <span class="attr">database</span>: <span class="string">'nlp_dict'</span>
});

pool.getConnection(<span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>{
  <span class="keyword">let</span> sql = <span class="string">'select * from tb_nature where nature = "'</span> + param + <span class="string">'" and del_status=1'</span>;
  conn.query(sql, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>{
    <span class="built_in">console</span>.log(result);
  })
});
</code></pre>
<a id="more"></a>
<p>这时正常情况下能查询到一条数据，如果将param修改成<br>let param = ‘ns”– ‘;<br>sql语句就会变成<br>select * from tb_nature where nature = “ns”– “ and del_status=1<br>后面的del_status就会被参数中的 – 注释掉，失去作用，能查询到多条数据。  </p>
<p>如果对param使用escape包装下，就能将参数中的特殊字符进行转义，防止sql的注入。<br>let sql = ‘select * from tb_nature where nature = ‘ +  mysql.escape(param) + ‘ and del_status=1’;</p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。&quot;&gt;&lt;a href=&quot;#直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。&quot; class=&quot;headerlink&quot; title=&quot;直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。&quot;&gt;&lt;/a&gt;直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mysql = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; param = &lt;span class=&quot;string&quot;&gt;&#39;ns&#39;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pool = mysql.createPool({
  &lt;span class=&quot;attr&quot;&gt;user&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;database&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;nlp_dict&#39;&lt;/span&gt;
});

pool.getConnection(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, conn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sql = &lt;span class=&quot;string&quot;&gt;&#39;select * from tb_nature where nature = &quot;&#39;&lt;/span&gt; + param + &lt;span class=&quot;string&quot;&gt;&#39;&quot; and del_status=1&#39;&lt;/span&gt;;
  conn.query(sql, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, result&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);
  })
});
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Node.js" scheme="http://www.haiyue.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Android 基础</title>
    <link href="http://www.haiyue.me/2016/05/28/android-base/"/>
    <id>http://www.haiyue.me/2016/05/28/android-base/</id>
    <published>2016-05-27T16:00:00.000Z</published>
    <updated>2016-06-28T06:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-开发的基本环境"><a href="#Android-开发的基本环境" class="headerlink" title="Android 开发的基本环境"></a>Android 开发的基本环境</h3><ul>
<li>JDK (Java Development Kit)  </li>
<li>IDE (Android Studio)  </li>
<li>Android SDK (Android Software Development Kit)  </li>
<li>ADT (Android Development Tools)  </li>
</ul>
<a id="more"></a>
<h3 id="ADT-和-Android-SDK的区别"><a href="#ADT-和-Android-SDK的区别" class="headerlink" title="ADT 和 Android SDK的区别"></a>ADT 和 Android SDK的区别</h3><ul>
<li>ADT(Android Development Tools)： 目前Android开发所用的开发工具是Eclipse，在Eclipse编译IDE环境中，安装ADT，为Android开发提供开发工具的升级或者变更，简单理解为在Eclipse下开发工具的升级下载工具。ADT只是一个Eclipse的插件，里面可以设置sdk路径。     </li>
<li>SDK(Software Development Kit)： 一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。在Android中，他为开发者提供了库文件以及其他开发所用到的工具。简单理解为开发工具包集合，是整体开发中所用到的工具包，如果你不用Eclipse作为你的开发工具，你就不需要下载ADT，只下载SDK即可开发。  </li>
</ul>
<h3 id="JDK-和-JRE的区别"><a href="#JDK-和-JRE的区别" class="headerlink" title="JDK 和 JRE的区别"></a>JDK 和 JRE的区别</h3><ul>
<li>JRE(Java Runtime Environment): 顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。  </li>
<li>JDK(Java Development Kit): 顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。</li>
<li>JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。</li>
</ul>
<h3 id="Android项目目录结构"><a href="#Android项目目录结构" class="headerlink" title="Android项目目录结构"></a>Android项目目录结构</h3><ul>
<li>src    放java代码的目录</li>
<li>gen    目录下的文件是编译器生成</li>
<li>assets 资源目录，例如音频、图片、xml（不一定要打入apk包中）</li>
<li>bin    存放编译后的.class .dex  .apk文件的目录，编译器生成</li>
<li>libs    放第三方jar包</li>
<li><p>res    资源目录 （都要打入apk包中）</p>
<ul>
<li><p>drawable（根据名字存放不同分辨率的图片，Android系统为了适配移动设备会根据设备的DPI去对应的目录选择图片）</p>
<ul>
<li>Drawable-hdpi 存放高分辨率图片；</li>
<li>Drawable-ldpi 存放低分辨率图片；</li>
<li>Drawable-mdpi 存放中分辨率图片；</li>
<li>Drawable-xhdpi 存放中高分辨率图片；</li>
<li>Drawable-xhdpi 存放特高分辨率图片。</li>
</ul>
</li>
<li><p>layout 布局文件，Android系统为了使控制层和View层做分离，对一些静态的界面尽量写成xml文件的形式放在Layout文件夹下。</p>
</li>
<li>menu 存放菜单文件</li>
<li>values 存放文字信息配置<ul>
<li>dimens.xml文件存放一些尺寸信息，为了适配屏幕用；</li>
<li>string.xml文件存放文本信息；</li>
<li>styles.xml 文件中定义了一些属性集，方便复用和修改。</li>
</ul>
</li>
<li>AndroidManifest.xml 清单文件，这个文件列出了应用程序所提供的功能，需要什么权限，用到那些服务，当前应用的版本，最低支持android版本，应用的名称、图标和包名，有那些组件，每个组件的配置信息</li>
</ul>
</li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android-开发的基本环境&quot;&gt;&lt;a href=&quot;#Android-开发的基本环境&quot; class=&quot;headerlink&quot; title=&quot;Android 开发的基本环境&quot;&gt;&lt;/a&gt;Android 开发的基本环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JDK (Java Development Kit)  &lt;/li&gt;
&lt;li&gt;IDE (Android Studio)  &lt;/li&gt;
&lt;li&gt;Android SDK (Android Software Development Kit)  &lt;/li&gt;
&lt;li&gt;ADT (Android Development Tools)  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="http://www.haiyue.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>mysql 批量删除错误分析</title>
    <link href="http://www.haiyue.me/2016/05/26/mysql-batch-delete/"/>
    <id>http://www.haiyue.me/2016/05/26/mysql-batch-delete/</id>
    <published>2016-05-25T16:00:00.000Z</published>
    <updated>2016-05-26T08:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> t1 <span class="keyword">from</span> tb_dict t1 </div><div class="line"><span class="keyword">where</span> t1.id <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> t2.id <span class="keyword">from</span> tb_dict t2 <span class="keyword">where</span> t2.nature = <span class="string">'v-taxi'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>使用这条 sql 语句进行批量删除时报 “You can’t specify target table ‘t1’ for update in FROM clause” 错误，查询后得知原来 msyql 不允许在子查询的同时删除原表中的数据。下面对应的解决办法。</p>
<pre><code class="sql"><span class="keyword">delete</span> t1 <span class="keyword">from</span> tb_dict t1 
<span class="keyword">where</span> t1.id <span class="keyword">in</span> (
    <span class="keyword">select</span> t3.id <span class="keyword">from</span> (
        <span class="keyword">select</span> * <span class="keyword">from</span> tb_dict t2 <span class="keyword">where</span> t2.nature = <span class="string">'v-taxi'</span>
    ) <span class="keyword">as</span> t3
);
</code></pre>
<p>将子查询得到的数据封装成临时表，这时就能解决问题了。</p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="sql" scheme="http://www.haiyue.me/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>sql 操作</title>
    <link href="http://www.haiyue.me/2016/05/26/sql/"/>
    <id>http://www.haiyue.me/2016/05/26/sql/</id>
    <published>2016-05-25T16:00:00.000Z</published>
    <updated>2016-05-26T09:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>删除重复的数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> a <span class="keyword">from</span> tb_dict a</div><div class="line"><span class="keyword">where</span> (a.keyword,a.nature) <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> keyword,nature <span class="keyword">from</span> tb_dict <span class="keyword">group</span> <span class="keyword">by</span> keyword, nature <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>) b</div><div class="line">) </div><div class="line"><span class="keyword">and</span> a.id <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> tb_dict <span class="keyword">group</span> <span class="keyword">by</span> keyword, nature <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>) c</div><div class="line">)</div></pre></td></tr></table></figure>
<a id="more"></a>      
<p>查询重复的数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_dict a </div><div class="line"><span class="keyword">where</span> (a.keyword,a.nature, a.freq) <span class="keyword">in</span> (</div><div class="line">	<span class="keyword">select</span> keyword,nature, freq <span class="keyword">from</span> tb_dict <span class="keyword">group</span> <span class="keyword">by</span> keyword, nature, freq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;删除重复的数据&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; tb_dict a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; (a.keyword,a.nature) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; keyword,nature &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; tb_dict &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; keyword, nature &lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(*) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; a.id &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; tb_dict &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; keyword, nature &lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(*)&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="sql" scheme="http://www.haiyue.me/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>List 进行 remove 操作时抛出 java.lang.UnsupportedOperationException 异常分析</title>
    <link href="http://www.haiyue.me/2016/05/13/UnsupportedOperationException/"/>
    <id>http://www.haiyue.me/2016/05/13/UnsupportedOperationException/</id>
    <published>2016-05-12T16:00:00.000Z</published>
    <updated>2016-05-13T07:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天将一个数组转换成 List 然后进行 remove 操作时却抛出 java.lang.UnsupportedOperationException 异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String pattern = <span class="string">" ^, v, m, n-music-name, $ "</span>;</div><div class="line">String[] patternSplit = Utils.getStringTrimSplit(pattern, <span class="string">","</span>);</div><div class="line"></div><div class="line"><span class="comment">// 去除模式中的^和$标识</span></div><div class="line">List&lt;String&gt; natureList = Arrays.asList(patternSplit);</div><div class="line"><span class="keyword">if</span> (<span class="string">"^"</span>.equals(natureList.get(<span class="number">0</span>))) &#123;</div><div class="line">    natureList.remove(<span class="number">0</span>); <span class="comment">// throw java.lang.UnsupportedOperationException</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="string">"$"</span>.equals(natureList.get(natureList.size() - <span class="number">1</span>))) &#123;</div><div class="line">    natureList.remove(natureList.size() - <span class="number">1</span>); <span class="comment">// throw java.lang.UnsupportedOperationException</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">String[] natureArray = natureList.toArray(<span class="keyword">new</span> String[natureList.size()]);</div><div class="line">System.out.println(natureArray.length);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>看了下源码才发现使用 Arrays.asList(arr) 转换的 List 并不能进行 add 和 remove 操作。<br>Arrays.asList(arr) 返回的类型是 Aarrays$ArrayList 并不是 ArrayList，<br>Aarrays$ArrayList 和 ArrayList 都继承 AbstractList，但是 AbstractList 中的 add 方法和 remove 方法都是直接抛出 UnsupportedOperationException，并没有直接实现。<br>ArrayList 重写了 add 方法和 remove 方法,能够进行对应的添加和删除操作，Aarrays$ArrayList 却没有去重写，所以此时调用 add 方法和 remove   方法会抛出 UnsupportedOperationException。 </p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><pre><code class="java"><span class="comment">// old</span>
List&lt;String&gt; natureList = Arrays.asList(patternSplit);
<span class="comment">// new </span>
List&lt;String&gt; natureList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(patternSplit));
</code></pre>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>Arrays.asList(arr) 返回 Aarrays$ArrayList ， Aarrays$ArrayList 继承 AbstractList<br><img src="http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException1.jpg" alt=""><br>ArrayList 继承 AbstractList<br><img src="http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException2.jpg" alt=""><br>AbstractList 中的 add 方法和 remove 方法都直接抛出 UnsupportedOperationException<br><img src="http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException3.jpg" alt=""><br>ArrayList 重写 add 方法和 remove 方法<br><img src="http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException4.jpg" alt="">   </p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天将一个数组转换成 List 然后进行 remove 操作时却抛出 java.lang.UnsupportedOperationException 异常。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String pattern = &lt;span class=&quot;string&quot;&gt;&quot; ^, v, m, n-music-name, $ &quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] patternSplit = Utils.getStringTrimSplit(pattern, &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 去除模式中的^和$标识&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; natureList = Arrays.asList(patternSplit);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;^&quot;&lt;/span&gt;.equals(natureList.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    natureList.remove(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// throw java.lang.UnsupportedOperationException&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;$&quot;&lt;/span&gt;.equals(natureList.get(natureList.size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    natureList.remove(natureList.size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// throw java.lang.UnsupportedOperationException&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] natureArray = natureList.toArray(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[natureList.size()]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(natureArray.length);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://www.haiyue.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://www.haiyue.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>缓存的相关概念和应用</title>
    <link href="http://www.haiyue.me/2016/05/11/cache/"/>
    <id>http://www.haiyue.me/2016/05/11/cache/</id>
    <published>2016-05-10T16:00:00.000Z</published>
    <updated>2016-05-11T06:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般都是用Redis或者Memcached来做数据的缓存，让程序的读取效率更高，以此缓解数据库的压力。</p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>原因：我们在项目中使用缓存通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>
<a id="more"></a>
<p>解决办法：可以在查询时将不存在的key预先设定一个值。比如，”key” , “&amp;&amp;”。在返回这个&amp;&amp;值的时候，我们的应用就可以认为这是不存在的key，再次请求这个key，如果取到的值不再是&amp;&amp;，则可以认为这时候key有值了，从而避免了透传到数据库，从而把大量的类似请求挡在了缓存之中。</p>
<h2 id="缓存并发"><a href="#缓存并发" class="headerlink" title="缓存并发"></a>缓存并发</h2><p>原因：有时候如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题。</p>
<p>解决办法：对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。</p>
<h2 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h2><p>原因：高并发的时候，平时我们设定一个缓存的过期时间时，可能有一些会设置1分钟啊，5分钟这些，并发很高时可能会出在某一个时间同时生成了很多的缓存，并且过期时间都一样，这个时候就可能引发一当过期时间到后，这些缓存同时失效，请求全部转发到DB，DB可能会压力过重。</p>
<p>解决办法：将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>缓存并发和缓存失效都是在高并发的时候对压力的优化，缓存穿透很有必要在做缓存的时候加上解决的措施。</p>
<p>原文链接：<a href="http://www.jianshu.com/p/d96906140199" target="_blank" rel="external">缓存穿透、缓存并发、缓存失效之思路变迁 - 小程故事多</a>   </p>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般都是用Redis或者Memcached来做数据的缓存，让程序的读取效率更高，以此缓解数据库的压力。&lt;/p&gt;
&lt;h2 id=&quot;缓存穿透&quot;&gt;&lt;a href=&quot;#缓存穿透&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透&quot;&gt;&lt;/a&gt;缓存穿透&lt;/h2&gt;&lt;p&gt;原因：我们在项目中使用缓存通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。有人利用不存在的key频繁攻击我们的应用，这就是漏洞。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://www.haiyue.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>We have a problem with promises</title>
    <link href="http://www.haiyue.me/2016/02/23/promises/"/>
    <id>http://www.haiyue.me/2016/02/23/promises/</id>
    <published>2016-02-22T16:00:00.000Z</published>
    <updated>2016-02-23T04:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下面的四种-promises-的区别是什么"><a href="#下面的四种-promises-的区别是什么" class="headerlink" title="下面的四种 promises 的区别是什么"></a>下面的四种 promises 的区别是什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="keyword">return</span> doSomethingElse();  </div><div class="line">&#125;);  </div><div class="line">  </div><div class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">    doSomethingElse();  </div><div class="line">&#125;);  </div><div class="line">  </div><div class="line">doSomething().then(doSomethingElse());  </div><div class="line"></div><div class="line">doSomething().then(doSomethingElse);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="原文地址链接：http-fex-baidu-com-blog-2015-07-we-have-a-problem-with-promises"><a href="#原文地址链接：http-fex-baidu-com-blog-2015-07-we-have-a-problem-with-promises" class="headerlink" title="原文地址链接：http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/"></a>原文地址链接：<a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" target="_blank" rel="external">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a></h3><p>Puzzle #1</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doSomething</div><div class="line">|-----------------|</div><div class="line">                  doSomethingElse(<span class="literal">undefined</span>)</div><div class="line">                  |------------------|</div><div class="line">                                     finalHandler(resultOfDoSomethingElse)</div><div class="line">                                     |------------------|</div></pre></td></tr></table></figure>
<p>Puzzle #2</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doSomething</div><div class="line">|-----------------|</div><div class="line">                  doSomethingElse(<span class="literal">undefined</span>)</div><div class="line">                  |------------------|</div><div class="line">                  finalHandler(<span class="literal">undefined</span>)</div><div class="line">                  |------------------|</div></pre></td></tr></table></figure>
<p>Puzzle #3</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doSomething</div><div class="line">|-----------------|</div><div class="line">doSomethingElse(<span class="literal">undefined</span>)</div><div class="line">|---------------------------------|</div><div class="line">                  finalHandler(resultOfDoSomething)</div><div class="line">                  |------------------|</div></pre></td></tr></table></figure>
<p>Puzzle #4</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doSomething</div><div class="line">|-----------------|</div><div class="line">                  doSomethingElse(resultOfDoSomething)</div><div class="line">                  |------------------|</div><div class="line">                                     finalHandler(resultOfDoSomethingElse)</div><div class="line">                                     |------------------|</div></pre></td></tr></table></figure>
<p>Promises 解决了 Callback Hell 问题，并且不仅仅是缩进问题。就像在 《Callback Hell 的救赎》 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。</p>
<h2 id="Promises的正确的风格"><a href="#Promises的正确的风格" class="headerlink" title="Promises的正确的风格"></a>Promises的正确的风格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">remotedb.allDocs(...).then(<span class="function"><span class="keyword">function</span> (<span class="params">resultOfAllDocs</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> localdb.put(...);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resultOfPut</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> localdb.get(...);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resultOfGet</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> localdb.put(...);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用</p>
<h2 id="用了-promises-后怎么用-forEach"><a href="#用了-promises-后怎么用-forEach" class="headerlink" title="用了 promises 后怎么用 forEach?"></a>用了 promises 后怎么用 forEach?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误写法</span></div><div class="line"><span class="comment">// I want to remove() all docs</span></div><div class="line">db.allDocs(&#123;<span class="attr">include_docs</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">  result.rows.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</div><div class="line">    db.remove(row.doc);  </div><div class="line">  &#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// I naively believe all docs have been removed() now!</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 正确写法</span></div><div class="line">db.allDocs(&#123;<span class="attr">include_docs</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(result.rows.map(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> db.remove(row.doc);</div><div class="line">  &#125;));</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">arrayOfResults</span>) </span>&#123;</div><div class="line">  <span class="comment">// All docs have really been removed() now!</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>一定不要忘记使用 .catch()</p>
<h2 id="catch-与-then-null-…-并非完全等价"><a href="#catch-与-then-null-…-并非完全等价" class="headerlink" title="catch() 与 then(null, …) 并非完全等价"></a>catch() 与 then(null, …) 并非完全等价</h2><p>catch() 仅仅是一个语法糖。因此下面两段代码是等价的:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">somePromise().catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// handle error</span></div><div class="line">&#125;);</div><div class="line">somePromise().then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// handle error</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是并非完全等价</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oh noes'</span>);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// I caught your error! :)</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oh noes'</span>);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// I didn't catch your error! :(</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下面的四种-promises-的区别是什么&quot;&gt;&lt;a href=&quot;#下面的四种-promises-的区别是什么&quot; class=&quot;headerlink&quot; title=&quot;下面的四种 promises 的区别是什么&quot;&gt;&lt;/a&gt;下面的四种 promises 的区别是什么&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomethingElse();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    doSomethingElse();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;doSomething().then(doSomethingElse());  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;doSomething().then(doSomethingElse);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://www.haiyue.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出ES6笔记</title>
    <link href="http://www.haiyue.me/2016/02/18/ES6-in-depth/"/>
    <id>http://www.haiyue.me/2016/02/18/ES6-in-depth/</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2016-02-18T07:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-是什么"><a href="#ES6-是什么" class="headerlink" title="ES6 是什么"></a>ES6 是什么</h1><ul>
<li>编程语言 JavaScript 是 ECMAScript 的实现和扩展,由 ECMA(一个类似 W3C 的标准组织)参与进行标准化。   </li>
<li>ES4 饱受争议,当标准委员会最终停止开发 ES4 时,其成员同意发布一个相对谦和的 ES5 版本,随后继续制定一些更具实质性的新特性。这一明确的协商协议最终命 名为“Harmony”(ES6)。  </li>
<li>2009 年发布的改进版本 ES5,引入了 Object.create()、Object.defineProperty()、getters 和 setters、严格模式以及 JSON 对象。  </li>
<li>如果你想在 web 环境中使用这种新语法,同时需要支持 IE 和 Safari, 你可以使用 Babel 或 Google 的 Traceur 这些编译器来将你的 ES6 代码翻译为 Web 友好 的 ES5 代码。  </li>
</ul>
<a id="more"></a>
<h1 id="迭代器和-for-of-循环"><a href="#迭代器和-for-of-循环" class="headerlink" title="迭代器和 for-of 循环"></a>迭代器和 for-of 循环</h1><h2 id="遍历数组中的元素"><a href="#遍历数组中的元素" class="headerlink" title="遍历数组中的元素"></a>遍历数组中的元素</h2><ul>
<li><p>20 年前 JavaScript 刚萌生时     </p>
<pre><code>for (var index = 0; index &lt; myArray.length; index++) { 
    console.log(myArray[index]);
}
</code></pre></li>
<li><p>ES5 正式发布后  </p>
<pre><code>myArray.forEach(function (value) { 
    console.log(value);
});  
</code></pre><p>  这段代码看起来更加简洁,但这种方法也有一个小缺陷:你不能使用 break 语句中 断循环,也不能使用 return 语句返回到外层函数。  </p>
</li>
<li><p>for-in 循环(千万别这样做, 是为普通对象设计的) </p>
<pre><code>for (var index in myArray) {
    console.log(myArray[index]);
}
</code></pre><p>  在这段代码中,赋给index的值不是实际的数字,而是字符串“0”、“1”、“2”, 此时很可能在无意之间进行字符串算数计算,例如:“2” + 1 == “21”,这给 编码过程带来极大的不便。<br>  作用于数组的 for-in 循环体除了遍历数组元素外,还会遍历自定义属性。举个例子,如果你的数组中有一个可枚举属性 myArray.name,循环将额外执行 一次,遍历到名为“name”的索引。就连数组原型链上的属性都能被访问到。<br>  最让人震惊的是,在某些情况下,这段代码可能按照随机顺序遍历数组元素。<br>  简而言之,for-in 是为普通对象设计的,你可以遍历得到字符串类型的键,因此不适用于数组遍历。</p>
</li>
<li><p>ES6</p>
<pre><code>for (var value of myArray) {
    console.log(value);
}
</code></pre><p>  for-in 循环用来遍历对象属性。<br>  for-of 循环用来遍历数据—例如数组中的值。</p>
</li>
</ul>
<h2 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for-of 循环"></a>for-of 循环</h2><pre><code>for (var value of myArray) {
  console.log(value);
}
</code></pre><p>这是最简洁、最直接的遍历数组元素的语法<br>这个方法避开了 for-in 循环的所有缺陷<br>与 forEach()不同的是,它可以正确响应 break、continue 和 return 语句<br>for-of 循环不仅支持数组,还支持大多数类数组对象,例如 DOM NodeList 对象。<br>for-of 循环也支持字符串遍历,它将字符串视为一系列的 Unicode 字符来进行遍历  </p>
<pre><code>var str = &apos;liuhaiming&apos;;
for(var chr of str) {
  console.log(chr);
}
</code></pre><p>for-of 循环也支持Set 对象  </p>
<pre><code>var uniqueWords = new Set(words);
for (var word of uniqueWords) {
  console.log(word);
}
</code></pre><p>for-of 循环也支持Map对象  </p>
<pre><code>for (var [key, value] of phoneBookMap) {
  console.log(key + &quot;&apos;s phone number is: &quot; + value);
}
</code></pre><p>for-of 循环不支持普通对象,但如果你想迭代一个对象的属性,你可以用 for-in 循 环(这也是它的本职工作)或内建的 Object.keys()方法:</p>
<pre><code>// 向控制台输出对象的可枚举属性
for (var key of Object.keys(someObject)) {
  console.log(key + &quot;: &quot; + someObject[key]);
}
</code></pre><p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6-是什么&quot;&gt;&lt;a href=&quot;#ES6-是什么&quot; class=&quot;headerlink&quot; title=&quot;ES6 是什么&quot;&gt;&lt;/a&gt;ES6 是什么&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编程语言 JavaScript 是 ECMAScript 的实现和扩展,由 ECMA(一个类似 W3C 的标准组织)参与进行标准化。   &lt;/li&gt;
&lt;li&gt;ES4 饱受争议,当标准委员会最终停止开发 ES4 时,其成员同意发布一个相对谦和的 ES5 版本,随后继续制定一些更具实质性的新特性。这一明确的协商协议最终命 名为“Harmony”(ES6)。  &lt;/li&gt;
&lt;li&gt;2009 年发布的改进版本 ES5,引入了 Object.create()、Object.defineProperty()、getters 和 setters、严格模式以及 JSON 对象。  &lt;/li&gt;
&lt;li&gt;如果你想在 web 环境中使用这种新语法,同时需要支持 IE 和 Safari, 你可以使用 Babel 或 Google 的 Traceur 这些编译器来将你的 ES6 代码翻译为 Web 友好 的 ES5 代码。  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.haiyue.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://www.haiyue.me/tags/js/"/>
    
  </entry>
  
</feed>
